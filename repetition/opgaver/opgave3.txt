 Opgave 3 - 26. april 2016 
 
 Lav Create-statement til en SQL-tabel:
 - Tabelnavn: Person
 - Kolonner: id (bigint, autogenereret, fortløbende, startende med 1), name (varchar, max længde 80, skal altid udfyldes), email (varchar, max længde 255, skal være unik), birthdate (dato, skal udfyldes)
 - Læg data i tabellen, svarende til den Liste, du lavede i opgave1.
 
 CREATE TABLE person (id BIGINT UNIQUE GENERATED BY DEFAULT AS IDENTITY(START WITH 1) UNIQUE,
  name VARCHAR(80) NOT NULL, email VARCHAR(255) NOT NULL UNIQUE,
   birthdate DATE NOT NULL);
 INSERT INTO person (  "NAME", "EMAIL", "BIRTHDATE" ) VALUES ( 'Hans', 'hi@eamv.dk', '1951-03-01' );
 INSERT INTO person (  "NAME", "EMAIL", "BIRTHDATE" ) VALUES ( 'Margit', 'margit@eamv.dk', '1955-01-01' );
 INSERT INTO person (  "NAME", "EMAIL", "BIRTHDATE" ) VALUES ( 'Marie', 'marie@eamv.dk', '1981-01-01' );
 INSERT INTO person (  "NAME", "EMAIL", "BIRTHDATE" ) VALUES ( 'Anne', 'anne@eamv.dk', '1984-01-01' );
 INSERT INTO person (  "NAME", "EMAIL", "BIRTHDATE" ) VALUES ( 'Søren', 'soren@eamv.dk', '1990-01-01' );
 
 Lav Create-statement til en SQL-tabel:
 - Tabelnavn: Employment
 - Kolonner: id (som ovenfor), company (varchar, max 50, skal udfyldes), employmentdate (dato, skal udfyldes) person (fremmednøgle til person, skal udfyldes)
 - Læg data i tabellen, så alle dine personer pånær en eller to findes i Employment, og så mindst to er ansat i samme Company

 CREATE TABLE employment (id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) UNIQUE,
  company VARCHAR(50) NOT NULL,
   employmentdate DATE NOT NULL,
    person BIGINT NOT NULL REFERENCES person (id));
 INSERT INTO employment (  "COMPANY", "EMPLOYMENTDATE", "PERSON" ) VALUES ( 'EAMV','2014-02-01' , 1);
 INSERT INTO employment (  "COMPANY", "EMPLOYMENTDATE", "PERSON" ) VALUES ( 'EAMV','2016-02-01' , 2);
 INSERT INTO employment (  "COMPANY", "EMPLOYMENTDATE", "PERSON" ) VALUES ( 'AAU','2016-02-01' , 3);
 
 Lav Selects, der viser følgende:
 - Alle personer sorteret efter fødselsdag, ældste sidst
  SELECT * FROM person ORDER BY birthdate DESC;
  
 - Alle employees, sorteret efter ansættelsesdato i faldende orden
  SELECT name, email, birthdate, company, employmentdate 
   FROM employment
   INNER JOIN person ON employment.person = person.id 
   ORDER BY employmentdate DESC;

 - Navne på personer og deres alder, i en given Company
  SELECT name, DATEDIFF('yy', birthdate, current_date) AS ALDER, company 
   FROM employment 
   INNER JOIN person ON employment.person = person.id 
   WHERE company = 'EAMV';

 - Oversigt over Companies, med antal ansatte
  SELECT company, count(*) AS ANTAL 
   FROM employment 
   INNER JOIN person ON employment.person = person.id 
   GROUP BY company;
 
 Lav domæne-objekter til Person og Employment.
 
 Lav data-klasser med CRUD-metoder, til begge tabeller.
 
 Lav logik-klasser med CRUD-metoder, og med commit/rollback-styring til een af tabellerne.